// Generated by CoffeeScript 1.6.3
(function() {
  var UglifyMinifier, clone, ngmin, sysPath, uglify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sysPath = require('path');

  uglify = require('uglify-js');

  ngmin = require('ngmin');

  clone = function(obj) {
    var copied, key, val;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    copied = new obj.constructor();
    for (key in obj) {
      val = obj[key];
      copied[key] = clone(val);
    }
    return copied;
  };

  module.exports = UglifyMinifier = (function() {
    UglifyMinifier.prototype.brunchPlugin = true;

    UglifyMinifier.prototype.type = 'javascript';

    function UglifyMinifier(config) {
      var _ref, _ref1, _ref2;
      this.config = config;
      this.optimize = __bind(this.optimize, this);
      this.options = (clone((_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? _ref1.uglify : void 0 : void 0)) || {};
      this.options.fromString = true;
      this.options.sourceMaps = (_ref2 = this.config) != null ? _ref2.sourceMaps : void 0;
    }

    UglifyMinifier.prototype.optimize = function(data, path, callback) {
      var err, error, optimized, result;
      try {
        data = ngmin.annotate(data);
        return optimized = uglify.minify(data, this.options);
      } catch (_error) {
        err = _error;
        return error = "JS minify failed on " + path + ": " + err;
      } finally {
        result = optimized && this.options.sourceMaps ? optimized : optimized.code;
        callback(error, result || data);
      }
    };

    return UglifyMinifier;

  })();

}).call(this);
